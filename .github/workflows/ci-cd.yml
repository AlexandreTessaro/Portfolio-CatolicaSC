name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Testes do Backend
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: startup_collab_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Create Test Environment File
      working-directory: ./backend
      run: |
        cp env.test.example .env.test
        echo "DB_HOST=localhost" >> .env.test
        echo "DB_PORT=5432" >> .env.test
        echo "DB_USER=user" >> .env.test
        echo "DB_PASSWORD=password" >> .env.test
        echo "DB_NAME=startup_collab_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
    
    - name: Wait for PostgreSQL
      run: |
        while ! nc -z localhost 5432; do
          sleep 1
        done
    
    - name: Wait for Redis
      run: |
        while ! nc -z localhost 6379; do
          sleep 1
        done
    
    - name: Run Database Migrations
      working-directory: ./backend
      run: npm run db:migrate
    
    - name: Run Backend Tests
      working-directory: ./backend
      run: npm test
    
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Testes do Frontend
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run Frontend Tests
      working-directory: ./frontend
      run: npm test
    
    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build

  # Linting e FormataÃ§Ã£o
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run Backend Linting
      working-directory: ./backend
      run: npm run lint
    
    - name: Run Frontend Linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Check Code Formatting
      working-directory: ./backend
      run: npm run format -- --check
    
    - name: Check Code Formatting
      working-directory: ./frontend
      run: npm run format -- --check

  # Build e Deploy (apenas na main)
  deploy:
    needs: [backend-tests, frontend-tests, code-quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
    
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Deploy to Staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Aqui vocÃª pode adicionar os comandos de deploy
        # Por exemplo, para Railway, Render, ou VPS
    
    - name: Notify Deployment
      run: |
        echo "âœ… Deployment completed successfully!"
        # Aqui vocÃª pode adicionar notificaÃ§Ãµes (Slack, Discord, etc.)
