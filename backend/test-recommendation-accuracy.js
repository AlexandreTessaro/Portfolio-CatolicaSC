import pool from './src/config/database.js';

// Fun√ß√£o para testar precis√£o do algoritmo de recomenda√ß√£o
async function testRecommendationAccuracy() {
  console.log('üß™ Testando precis√£o do algoritmo de recomenda√ß√£o...');
  
  const client = await pool.connect();
  
  try {
    // Estat√≠sticas atuais do banco
    const stats = await client.query(`
      SELECT 
        (SELECT COUNT(*) FROM users) as total_users,
        (SELECT COUNT(*) FROM projects) as total_projects,
        (SELECT COUNT(*) FROM collaboration_requests) as total_requests
    `);
    
    console.log('\nüìä Dados atuais no banco:');
    console.log(`   üë• Usu√°rios: ${stats.rows[0].total_users}`);
    console.log(`   üöÄ Projetos: ${stats.rows[0].total_projects}`);
    console.log(`   ü§ù Solicita√ß√µes: ${stats.rows[0].total_requests}`);
    
    // An√°lise de diversidade de skills
    const skillStats = await client.query(`
      SELECT skill, COUNT(*) as count
      FROM (
        SELECT jsonb_array_elements_text(skills) as skill
        FROM users
      ) skills_expanded
      GROUP BY skill
      ORDER BY count DESC
      LIMIT 20
    `);
    
    console.log('\nüõ†Ô∏è Distribui√ß√£o de skills:');
    skillStats.rows.forEach((row, index) => {
      const percentage = ((row.count / stats.rows[0].total_users) * 100).toFixed(1);
      console.log(`   ${index + 1}. ${row.skill}: ${row.count} usu√°rios (${percentage}%)`);
    });
    
    // An√°lise de diversidade de tecnologias em projetos
    const techStats = await client.query(`
      SELECT tech, COUNT(*) as count
      FROM (
        SELECT jsonb_array_elements_text(technologies) as tech
        FROM projects
      ) techs_expanded
      GROUP BY tech
      ORDER BY count DESC
      LIMIT 20
    `);
    
    console.log('\nüöÄ Distribui√ß√£o de tecnologias em projetos:');
    techStats.rows.forEach((row, index) => {
      const percentage = ((row.count / stats.rows[0].total_projects) * 100).toFixed(1);
      console.log(`   ${index + 1}. ${row.tech}: ${row.count} projetos (${percentage}%)`);
    });
    
    // Teste de matching entre skills de usu√°rios e tecnologias de projetos
    const matchingStats = await client.query(`
      SELECT 
        u.id as user_id,
        u.name as user_name,
        u.skills as user_skills,
        COUNT(p.id) as matching_projects
      FROM users u
      LEFT JOIN projects p ON u.skills @> p.technologies::jsonb
      WHERE u.is_admin = false
      GROUP BY u.id, u.name, u.skills
      ORDER BY matching_projects DESC
      LIMIT 10
    `);
    
    console.log('\nüéØ Usu√°rios com mais projetos compat√≠veis:');
    matchingStats.rows.forEach((row, index) => {
      const skills = JSON.parse(row.user_skills);
      console.log(`   ${index + 1}. ${row.user_name}: ${row.matching_projects} projetos compat√≠veis`);
      console.log(`      Skills: ${skills.join(', ')}`);
    });
    
    // An√°lise de solicita√ß√µes de colabora√ß√£o
    const requestStats = await client.query(`
      SELECT 
        p.title as project_title,
        p.technologies as project_techs,
        COUNT(cr.id) as total_requests,
        COUNT(CASE WHEN cr.status = 'accepted' THEN 1 END) as accepted_requests,
        COUNT(CASE WHEN cr.status = 'pending' THEN 1 END) as pending_requests,
        COUNT(CASE WHEN cr.status = 'rejected' THEN 1 END) as rejected_requests
      FROM projects p
      LEFT JOIN collaboration_requests cr ON p.id = cr.project_id
      GROUP BY p.id, p.title, p.technologies
      ORDER BY total_requests DESC
      LIMIT 10
    `);
    
    console.log('\nüìà Projetos com mais solicita√ß√µes:');
    requestStats.rows.forEach((row, index) => {
      const techs = JSON.parse(row.project_techs);
      const acceptanceRate = row.total_requests > 0 ? 
        ((row.accepted_requests / row.total_requests) * 100).toFixed(1) : '0.0';
      console.log(`   ${index + 1}. ${row.project_title}`);
      console.log(`      Tecnologias: ${techs.join(', ')}`);
      console.log(`      Solicita√ß√µes: ${row.total_requests} (${row.accepted_requests} aceitas, ${row.pending_requests} pendentes, ${row.rejected_requests} rejeitadas)`);
      console.log(`      Taxa de aceita√ß√£o: ${acceptanceRate}%`);
    });
    
    // Calcular precis√£o estimada
    const totalUsers = stats.rows[0].total_users;
    const totalProjects = stats.rows[0].total_projects;
    const totalRequests = stats.rows[0].total_requests;
    
    // M√©tricas de precis√£o
    const userProjectRatio = totalProjects / totalUsers;
    const requestPerUser = totalRequests / totalUsers;
    const requestPerProject = totalRequests / totalProjects;
    
    console.log('\nüìä M√©tricas de precis√£o:');
    console.log(`   Projetos por usu√°rio: ${userProjectRatio.toFixed(2)}`);
    console.log(`   Solicita√ß√µes por usu√°rio: ${requestPerUser.toFixed(2)}`);
    console.log(`   Solicita√ß√µes por projeto: ${requestPerProject.toFixed(2)}`);
    
    // Recomenda√ß√µes baseadas nos dados
    console.log('\nüí° Recomenda√ß√µes para melhorar precis√£o:');
    
    if (totalUsers < 100) {
      console.log('   ‚ö†Ô∏è Poucos usu√°rios (< 100): Recomenda-se aumentar para 500+ usu√°rios');
    } else if (totalUsers < 500) {
      console.log('   ‚ö†Ô∏è Usu√°rios moderados (< 500): Recomenda-se aumentar para 1000+ usu√°rios');
    } else {
      console.log('   ‚úÖ Boa quantidade de usu√°rios (‚â• 500)');
    }
    
    if (totalProjects < 50) {
      console.log('   ‚ö†Ô∏è Poucos projetos (< 50): Recomenda-se aumentar para 200+ projetos');
    } else if (totalProjects < 200) {
      console.log('   ‚ö†Ô∏è Projetos moderados (< 200): Recomenda-se aumentar para 500+ projetos');
    } else {
      console.log('   ‚úÖ Boa quantidade de projetos (‚â• 200)');
    }
    
    if (totalRequests < 200) {
      console.log('   ‚ö†Ô∏è Poucas intera√ß√µes (< 200): Recomenda-se aumentar para 1000+ solicita√ß√µes');
    } else if (totalRequests < 1000) {
      console.log('   ‚ö†Ô∏è Intera√ß√µes moderadas (< 1000): Recomenda-se aumentar para 3000+ solicita√ß√µes');
    } else {
      console.log('   ‚úÖ Boa quantidade de intera√ß√µes (‚â• 1000)');
    }
    
    // An√°lise de cobertura de skills
    const uniqueSkills = skillStats.rows.length;
    const skillCoverage = (uniqueSkills / 50) * 100; // Assumindo ~50 skills principais
    
    console.log(`\nüéØ Cobertura de skills: ${uniqueSkills} skills √∫nicas (${skillCoverage.toFixed(1)}% de cobertura)`);
    
    if (skillCoverage < 60) {
      console.log('   ‚ö†Ô∏è Baixa cobertura de skills: Adicionar mais usu√°rios com skills diversas');
    } else if (skillCoverage < 80) {
      console.log('   ‚ö†Ô∏è Cobertura moderada de skills: Melhorar diversidade de skills');
    } else {
      console.log('   ‚úÖ Boa cobertura de skills');
    }
    
    // Precis√£o estimada do algoritmo atual
    let estimatedAccuracy = 0;
    
    if (totalUsers >= 500 && totalProjects >= 200 && totalRequests >= 1000) {
      estimatedAccuracy = 85; // Alta precis√£o
    } else if (totalUsers >= 100 && totalProjects >= 50 && totalRequests >= 200) {
      estimatedAccuracy = 70; // Precis√£o moderada
    } else {
      estimatedAccuracy = 50; // Baixa precis√£o
    }
    
    console.log(`\nüéØ Precis√£o estimada do algoritmo atual: ${estimatedAccuracy}%`);
    
    if (estimatedAccuracy < 70) {
      console.log('   ‚ö†Ô∏è Precis√£o baixa: Recomenda-se aumentar significativamente os dados');
    } else if (estimatedAccuracy < 85) {
      console.log('   ‚ö†Ô∏è Precis√£o moderada: Melhorias incrementais recomendadas');
    } else {
      console.log('   ‚úÖ Precis√£o alta: Algoritmo funcionando bem');
    }
    
    // Sugest√µes espec√≠ficas
    console.log('\nüöÄ Pr√≥ximos passos recomendados:');
    console.log('   1. Gerar dados em escala com: npm run db:seed-scalable');
    console.log('   2. Implementar algoritmo de collaborative filtering');
    console.log('   3. Adicionar sistema de avalia√ß√µes/ratings');
    console.log('   4. Implementar machine learning para personaliza√ß√£o');
    console.log('   5. Adicionar an√°lise de comportamento do usu√°rio');
    
  } catch (error) {
    console.error('‚ùå Erro ao testar precis√£o:', error);
    throw error;
  } finally {
    client.release();
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testRecommendationAccuracy()
    .then(() => {
      console.log('\n‚úÖ Teste de precis√£o conclu√≠do!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Falha no teste de precis√£o:', error);
      process.exit(1);
    });
}

export default testRecommendationAccuracy;
